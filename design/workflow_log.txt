

* - as I am using the starter code provided, I am attempting to continue with the style and structure of the conde provided to create a seamless tr
- because of this, copilot is also suggesting to use the same style of code as the starter code*

DESIGN LOG:
My first step included asking the question: 
    How am I going to design the card structure? 
- I searched google to find common card structures, and naming conventions 
    and noted that a common solution would be to create a card class with suit and value attributes so I implemented this into my code

Next, I needed to fill my deck with cards, as there is already a deck class with a cards array, I knew i needed to fill this array with 52 unique instatiations of the card class. 
to do this, I defined the suit and val, 

CODE LOG: 
1. created a card class with suit and value attributes
    a. I have copilot installed, it suggested for me to create a __str__ method: 
        as I am not yet sure what the design of my card structure will be, 
        and how I will call my card class, I have commented this section out for later use. 
2. I then filled my deck with 52 cards, by 
    a. iterating through the suits and values, creating an instatiation of a card with each suit and value combination, and appending it to the cards array. 
3. I then ran my unit test and it passed! so I committed to the firsttestpass branch. 

Next, I needed to create a player class, so I could create instatiations of the players to make a playable game. 
I knew the player class would need to have a hand attribute that I could fill with cards, so I decided I would create this in the form of an array of card instances

CODE LOG:
4. Created a player class with hand and score attributes
    a. Again, as I have copilot installed, the suggestion was to create some generic card handling methods including: draw, discard, add score, reset score, discard. I accepted these suggestions and commented out the ones I dont need for now,
    as I dont wish to overcomplicate my logic. 
    b. In my draw method, I used a pop off of the deck array, and I knew that if I were to pop off of my current deck I would be taking an unshuffled deck, so I added a shuffle method to my deck class, importing the random module and utilising pythons shuffle method. 
    c. At this point, I attempted to migrate this draw method into the deck class, considering that having the dealing be a part of the player class would perhaps not be a good idea for the scalability of the application, however I encountered an error with circular importing, and decided that passing player instatiations into the deck wasnt a good idea, so I commented this out to reset to a passing point and committed my code. 

Next, I need to modify my initialisation to be able to pass the first scenario, making the 
CODE LOG: 
5.a. Modified my player class to take in an instatiation of my deck
b. changed my draw method to be able to take as many cards as needed, 
c. created a test to test the player initialisation
d. added a deal (call of the draw method) to my player initialisation (i would modify the placement of this call if I scaled up to have multiple games)
e. debugged

After committing this code, I moved on to scenario 2, this involved creating the scoring system and implementing some validation 
I wrote a test function to guide this next stage in the process. I realised I needed to create a score attribute in my card class, and a score calculating system into my hit method, as the only time a player would accumulate a card was when this method was called. As in blackjack an ace can be used as a 1 or 11, I decided to leave the scoring sysem as 11, and set up a flagging system inside the player class. 
I then wrote a litle print function into my test so I could debug my scoring system, and I realised I hadn't called my shuffle method in my deck initialisation so I was always getting the same output. 
As i was writing my test, I had skipped over the hand validation, as I knew i needed to establish my scoring system first. 
As I completed that task I was able to more on to creating a test for "given I have a valid hand" which meant implementing a condition that the score of the hand must be less than 21 for the player to be able to hit. 
To do this I modified the hit method to include both a check that the player was not already out of the game, to protect from user error, and a validate hand method call that checked the hand each time a card is drawn. 
I ran my unit tests and they passed! So i committed my code and merged my branch as scenario 2 was complete! 

I then created a new branch and moved on to completing the rest of the test scenarios. The next one involved implementing a stand function inside of the player method, which was quite simple as I was able to simply repeat the code from my other methods, so there was a user output and reset my flags. I had written in my validation into my methods so I was able to move on from scenario 4, and I had already written a bust method so I was able to move quite quickly past these, but in order to maintain the robust nature of my code I wrote some tests to ensure that these scenarios were fufilled as I expected. 
When writing my test for scenario 4 I realised that I didnt have much validation around the updating of my score/I wasnt using a very object oriented approach for the updating of this variable. I had already written a validate hand function, so to ensure that the only time that my score attribute was updated was by the add score method, so that there was always a failsafe in place, I migrated my code into the a method call. 
The final three scenarios tested the edge cases of the code. So I wrote these into some tests, as I had already written code to account for the ace edge case, I used these tests to ensure my logic was correct. 
Upon writing test scenario 7, I realised my logic couldn't deal with having two tens and one ace, i realised i needed to change my aceflag from being a flag to being a counting system, so I was able to account for the possibility of more than one ace. This would be especially important if i scaled the game up to deal with multiple decks as the possibility of having more than one ace would increase! I also realised in creating these test cases that I needed to further modularise all my code so i spent some time doing that in this stage. 
I ended up figuring out the logic to account for the possibility of having multiple aces, and tested the edge case of having four aces in a hand. My test passed so I committed my code and merged my branch! 
  







